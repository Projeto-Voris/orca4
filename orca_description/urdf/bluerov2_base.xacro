<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro">
    <xacro:macro name="box_inertia" params="x y z mass">
        <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
                 iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0"
                 izz="${0.0833333 * mass * (x*x + y*y)}"/>
    </xacro:macro>

    <xacro:macro name="bluerov2_base"
                 params="robot_namespace mass use_gz filename x y z heavy">

        <link name="${namespace}/base_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <mesh filename="${filename}"
                          scale="0.025 0.025 0.025"/>
                </geometry>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="${x} ${y} ${z}"/>  <!-- [m] [m] [m] -->
                </geometry>
            </collision>
            <inertial>
                <mass value="${mass}"/>
                <origin xyz="0 0 0"/>
                <xacro:box_inertia mass="${mass}" x="${x}" y="${y}" z="${z}"/>
=            </inertial>
            <xacro:if value="${use_gz}">
            <!-- IMU sensor gyro and accel data will be sent to ArduSub -->
            <sensor name="imu_sensor" type="imu">
                <!-- Transform from the Gazebo body frame (x-forward, y-left, z-up)
                     to the ArduPilot body frame (x-forward, y-right, z-down) -->
                <pose>0 0 0 ${pi} 0 0</pose>
                <always_on>1</always_on>
                <update_rate>1000.0</update_rate>
            </sensor>
            </xacro:if>
        </link>
        <xacro:if value="${use_gz}">
        <gazebo reference="${robot_namespace}/base_link">
            <plugin filename="gz-sim-hydrodynamics-system" name="gz::sim::systems::Hydrodynamics">
                <link_name>${robot_namespace}/base_link</link_name>
                <water_density>1000</water_density>
                <!-- Added mass: -->
                <xDotU>0</xDotU>
                <yDotV>0</yDotV>
                <zDotW>0</zDotW>
                <kDotP>0</kDotP>
                <mDotQ>0</mDotQ>
                <nDotR>0</nDotR>
                <!-- First order stability derivative: -->
                <xU>0</xU>
                <yV>0</yV>
                <zW>0</zW>
                <kP>0</kP>
                <mQ>0</mQ>
                <nR>0</nR>
                <!-- Second order stability derivative: -->
                <xacro:if value="${heavy}">
                    <xUabsU>-58.42</xUabsU>
                    <yVabsV>-55.137</yVabsV>
                    <zWabsW>-124.818</zWabsW>
                </xacro:if>
                <xacro:unless value="${heavy}">
                    <xUabsU>-33.800000000000004</xUabsU>
                    <yVabsV>-54.26875</yVabsV>
                    <zWabsW>-73.37135</zWabsW>
                </xacro:unless>
                <kPabsP>-4.0</kPabsP>
                <mQabsQ>-4.0</mQabsQ>
                <nRabsR>-4.0</nRabsR>
            </plugin>
        </gazebo>
        </xacro:if>
    </xacro:macro>


    <xacro:macro name="thruster" params="robot_namespace visual_rpy color motor_n axis xyz rpy uri_mesh use_gz">


        <link name="${namespace}/thruster${motor_n}_link">
            <visual name="thruster_prop_visual">
                <origin xyz="0 0 0" rpy="${visual_rpy}"/>
                <geometry>
                    <mesh filename="${uri_mesh}"/>
                </geometry>
            </visual>
            <inertial>
                <mass value="0.002"/>
                <inertia ixx="1e-3" ixy="0.0" ixz="0.0" iyy="1e-3" iyz="0.0" izz="1e-3"/>
            </inertial>
        </link>

        <joint name="${namespace}/thruster${motor_n}_joint" type="continuous">
            <parent link="${namespace}/base_link"/>
            <child link="${namespace}/thruster${motor_n}_link"/>
            <origin xyz="${xyz}" rpy="${rpy}"/>
            <axis xyz="${axis}"/>
        </joint>
        <xacro:if value="${use_gz}">
            <gazebo>
                <plugin filename="gz-sim-thruster-system" name="gz::sim::systems::Thruster">
                    <namespace>${namespace}</namespace>
                    <joint_name>${namespace}/thruster${motor_n}_joint</joint_name>
                    <thrust_coefficient>0.02</thrust_coefficient>
                    <fluid_density>1000</fluid_density>
                    <propeller_diameter>0.1</propeller_diameter>
                    <velocity_control>true</velocity_control>
                    <use_angvel_cmd>False</use_angvel_cmd>
                </plugin>
            </gazebo>
            <gazebo reference="${namespace}/thruster${motor_n}_link">
                <material>Gazebo/${color}</material>
            </gazebo>
        </xacro:if>
    </xacro:macro>
</robot>